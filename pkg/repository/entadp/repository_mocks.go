// Code generated by MockGen. DO NOT EDIT.
// Source: cafe-management/pkg/repository/entadp (interfaces: RepositoryInterface)
//
// Generated by this command:
//
//	mockgen -destination=repository_mocks.go -package=entadp cafe-management/pkg/repository/entadp RepositoryInterface
//

// Package entadp is a generated GoMock package.
package entadp

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Price mocks base method.
func (m *MockRepositoryInterface) Price() PriceRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Price")
	ret0, _ := ret[0].(PriceRepository)
	return ret0
}

// Price indicates an expected call of Price.
func (mr *MockRepositoryInterfaceMockRecorder) Price() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Price", reflect.TypeOf((*MockRepositoryInterface)(nil).Price))
}

// Product mocks base method.
func (m *MockRepositoryInterface) Product() ProductRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Product")
	ret0, _ := ret[0].(ProductRepository)
	return ret0
}

// Product indicates an expected call of Product.
func (mr *MockRepositoryInterfaceMockRecorder) Product() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Product", reflect.TypeOf((*MockRepositoryInterface)(nil).Product))
}

// Reservation mocks base method.
func (m *MockRepositoryInterface) Reservation() ReservationRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reservation")
	ret0, _ := ret[0].(ReservationRepository)
	return ret0
}

// Reservation indicates an expected call of Reservation.
func (mr *MockRepositoryInterfaceMockRecorder) Reservation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reservation", reflect.TypeOf((*MockRepositoryInterface)(nil).Reservation))
}

// Table mocks base method.
func (m *MockRepositoryInterface) Table() TablesRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Table")
	ret0, _ := ret[0].(TablesRepository)
	return ret0
}

// Table indicates an expected call of Table.
func (mr *MockRepositoryInterfaceMockRecorder) Table() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Table", reflect.TypeOf((*MockRepositoryInterface)(nil).Table))
}

// TableTypes mocks base method.
func (m *MockRepositoryInterface) TableTypes() TablesTypeRepostiory {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TableTypes")
	ret0, _ := ret[0].(TablesTypeRepostiory)
	return ret0
}

// TableTypes indicates an expected call of TableTypes.
func (mr *MockRepositoryInterfaceMockRecorder) TableTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TableTypes", reflect.TypeOf((*MockRepositoryInterface)(nil).TableTypes))
}

// User mocks base method.
func (m *MockRepositoryInterface) User() UserRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(UserRepository)
	return ret0
}

// User indicates an expected call of User.
func (mr *MockRepositoryInterfaceMockRecorder) User() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockRepositoryInterface)(nil).User))
}
