// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cafe-management/ent/reservation"
	"cafe-management/ent/tables"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TablesCreate is the builder for creating a Tables entity.
type TablesCreate struct {
	config
	mutation *TablesMutation
	hooks    []Hook
}

// SetNumberOfGuests sets the "number_of_guests" field.
func (tc *TablesCreate) SetNumberOfGuests(i int) *TablesCreate {
	tc.mutation.SetNumberOfGuests(i)
	return tc
}

// SetTableNumber sets the "table_number" field.
func (tc *TablesCreate) SetTableNumber(i int) *TablesCreate {
	tc.mutation.SetTableNumber(i)
	return tc
}

// SetDescription sets the "description" field.
func (tc *TablesCreate) SetDescription(s string) *TablesCreate {
	tc.mutation.SetDescription(s)
	return tc
}

// SetTableType sets the "table_type" field.
func (tc *TablesCreate) SetTableType(s string) *TablesCreate {
	tc.mutation.SetTableType(s)
	return tc
}

// SetCreatedAt sets the "created_at" field.
func (tc *TablesCreate) SetCreatedAt(t time.Time) *TablesCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TablesCreate) SetNillableCreatedAt(t *time.Time) *TablesCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TablesCreate) SetUpdatedAt(t time.Time) *TablesCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TablesCreate) SetNillableUpdatedAt(t *time.Time) *TablesCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// AddReservationIDs adds the "reservation" edge to the Reservation entity by IDs.
func (tc *TablesCreate) AddReservationIDs(ids ...int) *TablesCreate {
	tc.mutation.AddReservationIDs(ids...)
	return tc
}

// AddReservation adds the "reservation" edges to the Reservation entity.
func (tc *TablesCreate) AddReservation(r ...*Reservation) *TablesCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tc.AddReservationIDs(ids...)
}

// Mutation returns the TablesMutation object of the builder.
func (tc *TablesCreate) Mutation() *TablesMutation {
	return tc.mutation
}

// Save creates the Tables in the database.
func (tc *TablesCreate) Save(ctx context.Context) (*Tables, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TablesCreate) SaveX(ctx context.Context) *Tables {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TablesCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TablesCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TablesCreate) defaults() {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := tables.DefaultCreatedAt
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := tables.DefaultUpdatedAt
		tc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TablesCreate) check() error {
	if _, ok := tc.mutation.NumberOfGuests(); !ok {
		return &ValidationError{Name: "number_of_guests", err: errors.New(`ent: missing required field "Tables.number_of_guests"`)}
	}
	if _, ok := tc.mutation.TableNumber(); !ok {
		return &ValidationError{Name: "table_number", err: errors.New(`ent: missing required field "Tables.table_number"`)}
	}
	if _, ok := tc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Tables.description"`)}
	}
	if _, ok := tc.mutation.TableType(); !ok {
		return &ValidationError{Name: "table_type", err: errors.New(`ent: missing required field "Tables.table_type"`)}
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Tables.created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Tables.updated_at"`)}
	}
	return nil
}

func (tc *TablesCreate) sqlSave(ctx context.Context) (*Tables, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TablesCreate) createSpec() (*Tables, *sqlgraph.CreateSpec) {
	var (
		_node = &Tables{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(tables.Table, sqlgraph.NewFieldSpec(tables.FieldID, field.TypeInt))
	)
	if value, ok := tc.mutation.NumberOfGuests(); ok {
		_spec.SetField(tables.FieldNumberOfGuests, field.TypeInt, value)
		_node.NumberOfGuests = value
	}
	if value, ok := tc.mutation.TableNumber(); ok {
		_spec.SetField(tables.FieldTableNumber, field.TypeInt, value)
		_node.TableNumber = value
	}
	if value, ok := tc.mutation.Description(); ok {
		_spec.SetField(tables.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := tc.mutation.TableType(); ok {
		_spec.SetField(tables.FieldTableType, field.TypeString, value)
		_node.TableType = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(tables.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(tables.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := tc.mutation.ReservationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tables.ReservationTable,
			Columns: []string{tables.ReservationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reservation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TablesCreateBulk is the builder for creating many Tables entities in bulk.
type TablesCreateBulk struct {
	config
	err      error
	builders []*TablesCreate
}

// Save creates the Tables entities in the database.
func (tcb *TablesCreateBulk) Save(ctx context.Context) ([]*Tables, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Tables, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TablesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TablesCreateBulk) SaveX(ctx context.Context) []*Tables {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TablesCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TablesCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
