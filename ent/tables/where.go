// Code generated by ent, DO NOT EDIT.

package tables

import (
	"cafe-management/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Tables {
	return predicate.Tables(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Tables {
	return predicate.Tables(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Tables {
	return predicate.Tables(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Tables {
	return predicate.Tables(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Tables {
	return predicate.Tables(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Tables {
	return predicate.Tables(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Tables {
	return predicate.Tables(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Tables {
	return predicate.Tables(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Tables {
	return predicate.Tables(sql.FieldLTE(FieldID, id))
}

// NumberOfGuests applies equality check predicate on the "number_of_guests" field. It's identical to NumberOfGuestsEQ.
func NumberOfGuests(v int) predicate.Tables {
	return predicate.Tables(sql.FieldEQ(FieldNumberOfGuests, v))
}

// TableNumber applies equality check predicate on the "table_number" field. It's identical to TableNumberEQ.
func TableNumber(v int) predicate.Tables {
	return predicate.Tables(sql.FieldEQ(FieldTableNumber, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Tables {
	return predicate.Tables(sql.FieldEQ(FieldDescription, v))
}

// TableType applies equality check predicate on the "table_type" field. It's identical to TableTypeEQ.
func TableType(v string) predicate.Tables {
	return predicate.Tables(sql.FieldEQ(FieldTableType, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Tables {
	return predicate.Tables(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Tables {
	return predicate.Tables(sql.FieldEQ(FieldUpdatedAt, v))
}

// NumberOfGuestsEQ applies the EQ predicate on the "number_of_guests" field.
func NumberOfGuestsEQ(v int) predicate.Tables {
	return predicate.Tables(sql.FieldEQ(FieldNumberOfGuests, v))
}

// NumberOfGuestsNEQ applies the NEQ predicate on the "number_of_guests" field.
func NumberOfGuestsNEQ(v int) predicate.Tables {
	return predicate.Tables(sql.FieldNEQ(FieldNumberOfGuests, v))
}

// NumberOfGuestsIn applies the In predicate on the "number_of_guests" field.
func NumberOfGuestsIn(vs ...int) predicate.Tables {
	return predicate.Tables(sql.FieldIn(FieldNumberOfGuests, vs...))
}

// NumberOfGuestsNotIn applies the NotIn predicate on the "number_of_guests" field.
func NumberOfGuestsNotIn(vs ...int) predicate.Tables {
	return predicate.Tables(sql.FieldNotIn(FieldNumberOfGuests, vs...))
}

// NumberOfGuestsGT applies the GT predicate on the "number_of_guests" field.
func NumberOfGuestsGT(v int) predicate.Tables {
	return predicate.Tables(sql.FieldGT(FieldNumberOfGuests, v))
}

// NumberOfGuestsGTE applies the GTE predicate on the "number_of_guests" field.
func NumberOfGuestsGTE(v int) predicate.Tables {
	return predicate.Tables(sql.FieldGTE(FieldNumberOfGuests, v))
}

// NumberOfGuestsLT applies the LT predicate on the "number_of_guests" field.
func NumberOfGuestsLT(v int) predicate.Tables {
	return predicate.Tables(sql.FieldLT(FieldNumberOfGuests, v))
}

// NumberOfGuestsLTE applies the LTE predicate on the "number_of_guests" field.
func NumberOfGuestsLTE(v int) predicate.Tables {
	return predicate.Tables(sql.FieldLTE(FieldNumberOfGuests, v))
}

// TableNumberEQ applies the EQ predicate on the "table_number" field.
func TableNumberEQ(v int) predicate.Tables {
	return predicate.Tables(sql.FieldEQ(FieldTableNumber, v))
}

// TableNumberNEQ applies the NEQ predicate on the "table_number" field.
func TableNumberNEQ(v int) predicate.Tables {
	return predicate.Tables(sql.FieldNEQ(FieldTableNumber, v))
}

// TableNumberIn applies the In predicate on the "table_number" field.
func TableNumberIn(vs ...int) predicate.Tables {
	return predicate.Tables(sql.FieldIn(FieldTableNumber, vs...))
}

// TableNumberNotIn applies the NotIn predicate on the "table_number" field.
func TableNumberNotIn(vs ...int) predicate.Tables {
	return predicate.Tables(sql.FieldNotIn(FieldTableNumber, vs...))
}

// TableNumberGT applies the GT predicate on the "table_number" field.
func TableNumberGT(v int) predicate.Tables {
	return predicate.Tables(sql.FieldGT(FieldTableNumber, v))
}

// TableNumberGTE applies the GTE predicate on the "table_number" field.
func TableNumberGTE(v int) predicate.Tables {
	return predicate.Tables(sql.FieldGTE(FieldTableNumber, v))
}

// TableNumberLT applies the LT predicate on the "table_number" field.
func TableNumberLT(v int) predicate.Tables {
	return predicate.Tables(sql.FieldLT(FieldTableNumber, v))
}

// TableNumberLTE applies the LTE predicate on the "table_number" field.
func TableNumberLTE(v int) predicate.Tables {
	return predicate.Tables(sql.FieldLTE(FieldTableNumber, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Tables {
	return predicate.Tables(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Tables {
	return predicate.Tables(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Tables {
	return predicate.Tables(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Tables {
	return predicate.Tables(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Tables {
	return predicate.Tables(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Tables {
	return predicate.Tables(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Tables {
	return predicate.Tables(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Tables {
	return predicate.Tables(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Tables {
	return predicate.Tables(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Tables {
	return predicate.Tables(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Tables {
	return predicate.Tables(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Tables {
	return predicate.Tables(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Tables {
	return predicate.Tables(sql.FieldContainsFold(FieldDescription, v))
}

// TableTypeEQ applies the EQ predicate on the "table_type" field.
func TableTypeEQ(v string) predicate.Tables {
	return predicate.Tables(sql.FieldEQ(FieldTableType, v))
}

// TableTypeNEQ applies the NEQ predicate on the "table_type" field.
func TableTypeNEQ(v string) predicate.Tables {
	return predicate.Tables(sql.FieldNEQ(FieldTableType, v))
}

// TableTypeIn applies the In predicate on the "table_type" field.
func TableTypeIn(vs ...string) predicate.Tables {
	return predicate.Tables(sql.FieldIn(FieldTableType, vs...))
}

// TableTypeNotIn applies the NotIn predicate on the "table_type" field.
func TableTypeNotIn(vs ...string) predicate.Tables {
	return predicate.Tables(sql.FieldNotIn(FieldTableType, vs...))
}

// TableTypeGT applies the GT predicate on the "table_type" field.
func TableTypeGT(v string) predicate.Tables {
	return predicate.Tables(sql.FieldGT(FieldTableType, v))
}

// TableTypeGTE applies the GTE predicate on the "table_type" field.
func TableTypeGTE(v string) predicate.Tables {
	return predicate.Tables(sql.FieldGTE(FieldTableType, v))
}

// TableTypeLT applies the LT predicate on the "table_type" field.
func TableTypeLT(v string) predicate.Tables {
	return predicate.Tables(sql.FieldLT(FieldTableType, v))
}

// TableTypeLTE applies the LTE predicate on the "table_type" field.
func TableTypeLTE(v string) predicate.Tables {
	return predicate.Tables(sql.FieldLTE(FieldTableType, v))
}

// TableTypeContains applies the Contains predicate on the "table_type" field.
func TableTypeContains(v string) predicate.Tables {
	return predicate.Tables(sql.FieldContains(FieldTableType, v))
}

// TableTypeHasPrefix applies the HasPrefix predicate on the "table_type" field.
func TableTypeHasPrefix(v string) predicate.Tables {
	return predicate.Tables(sql.FieldHasPrefix(FieldTableType, v))
}

// TableTypeHasSuffix applies the HasSuffix predicate on the "table_type" field.
func TableTypeHasSuffix(v string) predicate.Tables {
	return predicate.Tables(sql.FieldHasSuffix(FieldTableType, v))
}

// TableTypeEqualFold applies the EqualFold predicate on the "table_type" field.
func TableTypeEqualFold(v string) predicate.Tables {
	return predicate.Tables(sql.FieldEqualFold(FieldTableType, v))
}

// TableTypeContainsFold applies the ContainsFold predicate on the "table_type" field.
func TableTypeContainsFold(v string) predicate.Tables {
	return predicate.Tables(sql.FieldContainsFold(FieldTableType, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Tables {
	return predicate.Tables(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Tables {
	return predicate.Tables(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Tables {
	return predicate.Tables(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Tables {
	return predicate.Tables(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Tables {
	return predicate.Tables(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Tables {
	return predicate.Tables(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Tables {
	return predicate.Tables(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Tables {
	return predicate.Tables(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Tables {
	return predicate.Tables(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Tables {
	return predicate.Tables(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Tables {
	return predicate.Tables(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Tables {
	return predicate.Tables(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Tables {
	return predicate.Tables(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Tables {
	return predicate.Tables(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Tables {
	return predicate.Tables(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Tables {
	return predicate.Tables(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Tables) predicate.Tables {
	return predicate.Tables(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Tables) predicate.Tables {
	return predicate.Tables(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Tables) predicate.Tables {
	return predicate.Tables(sql.NotPredicates(p))
}
