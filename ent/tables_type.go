// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cafe-management/ent/tables_type"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Tables_type is the model entity for the Tables_type schema.
type Tables_type struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TablesID holds the value of the "tables_id" field.
	TablesID int `json:"tables_id,omitempty"`
	// Name holds the value of the "name" field.
	Name         string `json:"name,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tables_type) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tables_type.FieldID, tables_type.FieldTablesID:
			values[i] = new(sql.NullInt64)
		case tables_type.FieldName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tables_type fields.
func (tt *Tables_type) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tables_type.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tt.ID = int(value.Int64)
		case tables_type.FieldTablesID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tables_id", values[i])
			} else if value.Valid {
				tt.TablesID = int(value.Int64)
			}
		case tables_type.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				tt.Name = value.String
			}
		default:
			tt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Tables_type.
// This includes values selected through modifiers, order, etc.
func (tt *Tables_type) Value(name string) (ent.Value, error) {
	return tt.selectValues.Get(name)
}

// Update returns a builder for updating this Tables_type.
// Note that you need to call Tables_type.Unwrap() before calling this method if this Tables_type
// was returned from a transaction, and the transaction was committed or rolled back.
func (tt *Tables_type) Update() *TablesTypeUpdateOne {
	return NewTablesTypeClient(tt.config).UpdateOne(tt)
}

// Unwrap unwraps the Tables_type entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tt *Tables_type) Unwrap() *Tables_type {
	_tx, ok := tt.config.driver.(*txDriver)
	if !ok {
		panic("ent: Tables_type is not a transactional entity")
	}
	tt.config.driver = _tx.drv
	return tt
}

// String implements the fmt.Stringer.
func (tt *Tables_type) String() string {
	var builder strings.Builder
	builder.WriteString("Tables_type(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tt.ID))
	builder.WriteString("tables_id=")
	builder.WriteString(fmt.Sprintf("%v", tt.TablesID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(tt.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Tables_types is a parsable slice of Tables_type.
type Tables_types []*Tables_type
