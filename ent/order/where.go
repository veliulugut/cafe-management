// Code generated by ent, DO NOT EDIT.

package order

import (
	"cafe-management/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldID, id))
}

// OrderID applies equality check predicate on the "order_id" field. It's identical to OrderIDEQ.
func OrderID(v int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldOrderID, v))
}

// TableID applies equality check predicate on the "table_id" field. It's identical to TableIDEQ.
func TableID(v int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldTableID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUserID, v))
}

// OrderType applies equality check predicate on the "order_type" field. It's identical to OrderTypeEQ.
func OrderType(v int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldOrderType, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldStatus, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUpdatedAt, v))
}

// OrderDate applies equality check predicate on the "order_date" field. It's identical to OrderDateEQ.
func OrderDate(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldOrderDate, v))
}

// OrderIDEQ applies the EQ predicate on the "order_id" field.
func OrderIDEQ(v int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldOrderID, v))
}

// OrderIDNEQ applies the NEQ predicate on the "order_id" field.
func OrderIDNEQ(v int) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldOrderID, v))
}

// OrderIDIn applies the In predicate on the "order_id" field.
func OrderIDIn(vs ...int) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldOrderID, vs...))
}

// OrderIDNotIn applies the NotIn predicate on the "order_id" field.
func OrderIDNotIn(vs ...int) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldOrderID, vs...))
}

// OrderIDGT applies the GT predicate on the "order_id" field.
func OrderIDGT(v int) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldOrderID, v))
}

// OrderIDGTE applies the GTE predicate on the "order_id" field.
func OrderIDGTE(v int) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldOrderID, v))
}

// OrderIDLT applies the LT predicate on the "order_id" field.
func OrderIDLT(v int) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldOrderID, v))
}

// OrderIDLTE applies the LTE predicate on the "order_id" field.
func OrderIDLTE(v int) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldOrderID, v))
}

// TableIDEQ applies the EQ predicate on the "table_id" field.
func TableIDEQ(v int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldTableID, v))
}

// TableIDNEQ applies the NEQ predicate on the "table_id" field.
func TableIDNEQ(v int) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldTableID, v))
}

// TableIDIn applies the In predicate on the "table_id" field.
func TableIDIn(vs ...int) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldTableID, vs...))
}

// TableIDNotIn applies the NotIn predicate on the "table_id" field.
func TableIDNotIn(vs ...int) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldTableID, vs...))
}

// TableIDGT applies the GT predicate on the "table_id" field.
func TableIDGT(v int) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldTableID, v))
}

// TableIDGTE applies the GTE predicate on the "table_id" field.
func TableIDGTE(v int) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldTableID, v))
}

// TableIDLT applies the LT predicate on the "table_id" field.
func TableIDLT(v int) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldTableID, v))
}

// TableIDLTE applies the LTE predicate on the "table_id" field.
func TableIDLTE(v int) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldTableID, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldUserID, v))
}

// OrderTypeEQ applies the EQ predicate on the "order_type" field.
func OrderTypeEQ(v int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldOrderType, v))
}

// OrderTypeNEQ applies the NEQ predicate on the "order_type" field.
func OrderTypeNEQ(v int) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldOrderType, v))
}

// OrderTypeIn applies the In predicate on the "order_type" field.
func OrderTypeIn(vs ...int) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldOrderType, vs...))
}

// OrderTypeNotIn applies the NotIn predicate on the "order_type" field.
func OrderTypeNotIn(vs ...int) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldOrderType, vs...))
}

// OrderTypeGT applies the GT predicate on the "order_type" field.
func OrderTypeGT(v int) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldOrderType, v))
}

// OrderTypeGTE applies the GTE predicate on the "order_type" field.
func OrderTypeGTE(v int) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldOrderType, v))
}

// OrderTypeLT applies the LT predicate on the "order_type" field.
func OrderTypeLT(v int) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldOrderType, v))
}

// OrderTypeLTE applies the LTE predicate on the "order_type" field.
func OrderTypeLTE(v int) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldOrderType, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldUpdatedAt, v))
}

// OrderDateEQ applies the EQ predicate on the "order_date" field.
func OrderDateEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldOrderDate, v))
}

// OrderDateNEQ applies the NEQ predicate on the "order_date" field.
func OrderDateNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldOrderDate, v))
}

// OrderDateIn applies the In predicate on the "order_date" field.
func OrderDateIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldOrderDate, vs...))
}

// OrderDateNotIn applies the NotIn predicate on the "order_date" field.
func OrderDateNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldOrderDate, vs...))
}

// OrderDateGT applies the GT predicate on the "order_date" field.
func OrderDateGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldOrderDate, v))
}

// OrderDateGTE applies the GTE predicate on the "order_date" field.
func OrderDateGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldOrderDate, v))
}

// OrderDateLT applies the LT predicate on the "order_date" field.
func OrderDateLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldOrderDate, v))
}

// OrderDateLTE applies the LTE predicate on the "order_date" field.
func OrderDateLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldOrderDate, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Order) predicate.Order {
	return predicate.Order(sql.NotPredicates(p))
}
