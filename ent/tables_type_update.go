// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cafe-management/ent/predicate"
	"cafe-management/ent/tables_type"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TablesTypeUpdate is the builder for updating Tables_type entities.
type TablesTypeUpdate struct {
	config
	hooks    []Hook
	mutation *TablesTypeMutation
}

// Where appends a list predicates to the TablesTypeUpdate builder.
func (ttu *TablesTypeUpdate) Where(ps ...predicate.Tables_type) *TablesTypeUpdate {
	ttu.mutation.Where(ps...)
	return ttu
}

// SetTablesID sets the "tables_id" field.
func (ttu *TablesTypeUpdate) SetTablesID(i int) *TablesTypeUpdate {
	ttu.mutation.ResetTablesID()
	ttu.mutation.SetTablesID(i)
	return ttu
}

// SetNillableTablesID sets the "tables_id" field if the given value is not nil.
func (ttu *TablesTypeUpdate) SetNillableTablesID(i *int) *TablesTypeUpdate {
	if i != nil {
		ttu.SetTablesID(*i)
	}
	return ttu
}

// AddTablesID adds i to the "tables_id" field.
func (ttu *TablesTypeUpdate) AddTablesID(i int) *TablesTypeUpdate {
	ttu.mutation.AddTablesID(i)
	return ttu
}

// SetName sets the "name" field.
func (ttu *TablesTypeUpdate) SetName(s string) *TablesTypeUpdate {
	ttu.mutation.SetName(s)
	return ttu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ttu *TablesTypeUpdate) SetNillableName(s *string) *TablesTypeUpdate {
	if s != nil {
		ttu.SetName(*s)
	}
	return ttu
}

// Mutation returns the TablesTypeMutation object of the builder.
func (ttu *TablesTypeUpdate) Mutation() *TablesTypeMutation {
	return ttu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ttu *TablesTypeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ttu.sqlSave, ttu.mutation, ttu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ttu *TablesTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := ttu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ttu *TablesTypeUpdate) Exec(ctx context.Context) error {
	_, err := ttu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttu *TablesTypeUpdate) ExecX(ctx context.Context) {
	if err := ttu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ttu *TablesTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(tables_type.Table, tables_type.Columns, sqlgraph.NewFieldSpec(tables_type.FieldID, field.TypeInt))
	if ps := ttu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttu.mutation.TablesID(); ok {
		_spec.SetField(tables_type.FieldTablesID, field.TypeInt, value)
	}
	if value, ok := ttu.mutation.AddedTablesID(); ok {
		_spec.AddField(tables_type.FieldTablesID, field.TypeInt, value)
	}
	if value, ok := ttu.mutation.Name(); ok {
		_spec.SetField(tables_type.FieldName, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ttu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tables_type.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ttu.mutation.done = true
	return n, nil
}

// TablesTypeUpdateOne is the builder for updating a single Tables_type entity.
type TablesTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TablesTypeMutation
}

// SetTablesID sets the "tables_id" field.
func (ttuo *TablesTypeUpdateOne) SetTablesID(i int) *TablesTypeUpdateOne {
	ttuo.mutation.ResetTablesID()
	ttuo.mutation.SetTablesID(i)
	return ttuo
}

// SetNillableTablesID sets the "tables_id" field if the given value is not nil.
func (ttuo *TablesTypeUpdateOne) SetNillableTablesID(i *int) *TablesTypeUpdateOne {
	if i != nil {
		ttuo.SetTablesID(*i)
	}
	return ttuo
}

// AddTablesID adds i to the "tables_id" field.
func (ttuo *TablesTypeUpdateOne) AddTablesID(i int) *TablesTypeUpdateOne {
	ttuo.mutation.AddTablesID(i)
	return ttuo
}

// SetName sets the "name" field.
func (ttuo *TablesTypeUpdateOne) SetName(s string) *TablesTypeUpdateOne {
	ttuo.mutation.SetName(s)
	return ttuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ttuo *TablesTypeUpdateOne) SetNillableName(s *string) *TablesTypeUpdateOne {
	if s != nil {
		ttuo.SetName(*s)
	}
	return ttuo
}

// Mutation returns the TablesTypeMutation object of the builder.
func (ttuo *TablesTypeUpdateOne) Mutation() *TablesTypeMutation {
	return ttuo.mutation
}

// Where appends a list predicates to the TablesTypeUpdate builder.
func (ttuo *TablesTypeUpdateOne) Where(ps ...predicate.Tables_type) *TablesTypeUpdateOne {
	ttuo.mutation.Where(ps...)
	return ttuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ttuo *TablesTypeUpdateOne) Select(field string, fields ...string) *TablesTypeUpdateOne {
	ttuo.fields = append([]string{field}, fields...)
	return ttuo
}

// Save executes the query and returns the updated Tables_type entity.
func (ttuo *TablesTypeUpdateOne) Save(ctx context.Context) (*Tables_type, error) {
	return withHooks(ctx, ttuo.sqlSave, ttuo.mutation, ttuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ttuo *TablesTypeUpdateOne) SaveX(ctx context.Context) *Tables_type {
	node, err := ttuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ttuo *TablesTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := ttuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttuo *TablesTypeUpdateOne) ExecX(ctx context.Context) {
	if err := ttuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ttuo *TablesTypeUpdateOne) sqlSave(ctx context.Context) (_node *Tables_type, err error) {
	_spec := sqlgraph.NewUpdateSpec(tables_type.Table, tables_type.Columns, sqlgraph.NewFieldSpec(tables_type.FieldID, field.TypeInt))
	id, ok := ttuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Tables_type.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ttuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tables_type.FieldID)
		for _, f := range fields {
			if !tables_type.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tables_type.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ttuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttuo.mutation.TablesID(); ok {
		_spec.SetField(tables_type.FieldTablesID, field.TypeInt, value)
	}
	if value, ok := ttuo.mutation.AddedTablesID(); ok {
		_spec.AddField(tables_type.FieldTablesID, field.TypeInt, value)
	}
	if value, ok := ttuo.mutation.Name(); ok {
		_spec.SetField(tables_type.FieldName, field.TypeString, value)
	}
	_node = &Tables_type{config: ttuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ttuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tables_type.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ttuo.mutation.done = true
	return _node, nil
}
