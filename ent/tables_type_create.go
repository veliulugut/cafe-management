// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cafe-management/ent/tables_type"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TablesTypeCreate is the builder for creating a Tables_type entity.
type TablesTypeCreate struct {
	config
	mutation *TablesTypeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTablesID sets the "tables_id" field.
func (ttc *TablesTypeCreate) SetTablesID(i int) *TablesTypeCreate {
	ttc.mutation.SetTablesID(i)
	return ttc
}

// SetName sets the "name" field.
func (ttc *TablesTypeCreate) SetName(s string) *TablesTypeCreate {
	ttc.mutation.SetName(s)
	return ttc
}

// Mutation returns the TablesTypeMutation object of the builder.
func (ttc *TablesTypeCreate) Mutation() *TablesTypeMutation {
	return ttc.mutation
}

// Save creates the Tables_type in the database.
func (ttc *TablesTypeCreate) Save(ctx context.Context) (*Tables_type, error) {
	return withHooks(ctx, ttc.sqlSave, ttc.mutation, ttc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ttc *TablesTypeCreate) SaveX(ctx context.Context) *Tables_type {
	v, err := ttc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttc *TablesTypeCreate) Exec(ctx context.Context) error {
	_, err := ttc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttc *TablesTypeCreate) ExecX(ctx context.Context) {
	if err := ttc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttc *TablesTypeCreate) check() error {
	if _, ok := ttc.mutation.TablesID(); !ok {
		return &ValidationError{Name: "tables_id", err: errors.New(`ent: missing required field "Tables_type.tables_id"`)}
	}
	if _, ok := ttc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Tables_type.name"`)}
	}
	return nil
}

func (ttc *TablesTypeCreate) sqlSave(ctx context.Context) (*Tables_type, error) {
	if err := ttc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ttc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ttc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ttc.mutation.id = &_node.ID
	ttc.mutation.done = true
	return _node, nil
}

func (ttc *TablesTypeCreate) createSpec() (*Tables_type, *sqlgraph.CreateSpec) {
	var (
		_node = &Tables_type{config: ttc.config}
		_spec = sqlgraph.NewCreateSpec(tables_type.Table, sqlgraph.NewFieldSpec(tables_type.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ttc.conflict
	if value, ok := ttc.mutation.TablesID(); ok {
		_spec.SetField(tables_type.FieldTablesID, field.TypeInt, value)
		_node.TablesID = value
	}
	if value, ok := ttc.mutation.Name(); ok {
		_spec.SetField(tables_type.FieldName, field.TypeString, value)
		_node.Name = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Tables_type.Create().
//		SetTablesID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.Tables_typeUpsert) {
//			SetTablesID(v+v).
//		}).
//		Exec(ctx)
func (ttc *TablesTypeCreate) OnConflict(opts ...sql.ConflictOption) *Tables_typeUpsertOne {
	ttc.conflict = opts
	return &Tables_typeUpsertOne{
		create: ttc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Tables_type.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ttc *TablesTypeCreate) OnConflictColumns(columns ...string) *Tables_typeUpsertOne {
	ttc.conflict = append(ttc.conflict, sql.ConflictColumns(columns...))
	return &Tables_typeUpsertOne{
		create: ttc,
	}
}

type (
	// Tables_typeUpsertOne is the builder for "upsert"-ing
	//  one Tables_type node.
	Tables_typeUpsertOne struct {
		create *TablesTypeCreate
	}

	// Tables_typeUpsert is the "OnConflict" setter.
	Tables_typeUpsert struct {
		*sql.UpdateSet
	}
)

// SetTablesID sets the "tables_id" field.
func (u *Tables_typeUpsert) SetTablesID(v int) *Tables_typeUpsert {
	u.Set(tables_type.FieldTablesID, v)
	return u
}

// UpdateTablesID sets the "tables_id" field to the value that was provided on create.
func (u *Tables_typeUpsert) UpdateTablesID() *Tables_typeUpsert {
	u.SetExcluded(tables_type.FieldTablesID)
	return u
}

// AddTablesID adds v to the "tables_id" field.
func (u *Tables_typeUpsert) AddTablesID(v int) *Tables_typeUpsert {
	u.Add(tables_type.FieldTablesID, v)
	return u
}

// SetName sets the "name" field.
func (u *Tables_typeUpsert) SetName(v string) *Tables_typeUpsert {
	u.Set(tables_type.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *Tables_typeUpsert) UpdateName() *Tables_typeUpsert {
	u.SetExcluded(tables_type.FieldName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Tables_type.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *Tables_typeUpsertOne) UpdateNewValues() *Tables_typeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Tables_type.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *Tables_typeUpsertOne) Ignore() *Tables_typeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *Tables_typeUpsertOne) DoNothing() *Tables_typeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TablesTypeCreate.OnConflict
// documentation for more info.
func (u *Tables_typeUpsertOne) Update(set func(*Tables_typeUpsert)) *Tables_typeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&Tables_typeUpsert{UpdateSet: update})
	}))
	return u
}

// SetTablesID sets the "tables_id" field.
func (u *Tables_typeUpsertOne) SetTablesID(v int) *Tables_typeUpsertOne {
	return u.Update(func(s *Tables_typeUpsert) {
		s.SetTablesID(v)
	})
}

// AddTablesID adds v to the "tables_id" field.
func (u *Tables_typeUpsertOne) AddTablesID(v int) *Tables_typeUpsertOne {
	return u.Update(func(s *Tables_typeUpsert) {
		s.AddTablesID(v)
	})
}

// UpdateTablesID sets the "tables_id" field to the value that was provided on create.
func (u *Tables_typeUpsertOne) UpdateTablesID() *Tables_typeUpsertOne {
	return u.Update(func(s *Tables_typeUpsert) {
		s.UpdateTablesID()
	})
}

// SetName sets the "name" field.
func (u *Tables_typeUpsertOne) SetName(v string) *Tables_typeUpsertOne {
	return u.Update(func(s *Tables_typeUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *Tables_typeUpsertOne) UpdateName() *Tables_typeUpsertOne {
	return u.Update(func(s *Tables_typeUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *Tables_typeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TablesTypeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *Tables_typeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *Tables_typeUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *Tables_typeUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TablesTypeCreateBulk is the builder for creating many Tables_type entities in bulk.
type TablesTypeCreateBulk struct {
	config
	err      error
	builders []*TablesTypeCreate
	conflict []sql.ConflictOption
}

// Save creates the Tables_type entities in the database.
func (ttcb *TablesTypeCreateBulk) Save(ctx context.Context) ([]*Tables_type, error) {
	if ttcb.err != nil {
		return nil, ttcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ttcb.builders))
	nodes := make([]*Tables_type, len(ttcb.builders))
	mutators := make([]Mutator, len(ttcb.builders))
	for i := range ttcb.builders {
		func(i int, root context.Context) {
			builder := ttcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TablesTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ttcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ttcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ttcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ttcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ttcb *TablesTypeCreateBulk) SaveX(ctx context.Context) []*Tables_type {
	v, err := ttcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttcb *TablesTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := ttcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttcb *TablesTypeCreateBulk) ExecX(ctx context.Context) {
	if err := ttcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Tables_type.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.Tables_typeUpsert) {
//			SetTablesID(v+v).
//		}).
//		Exec(ctx)
func (ttcb *TablesTypeCreateBulk) OnConflict(opts ...sql.ConflictOption) *Tables_typeUpsertBulk {
	ttcb.conflict = opts
	return &Tables_typeUpsertBulk{
		create: ttcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Tables_type.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ttcb *TablesTypeCreateBulk) OnConflictColumns(columns ...string) *Tables_typeUpsertBulk {
	ttcb.conflict = append(ttcb.conflict, sql.ConflictColumns(columns...))
	return &Tables_typeUpsertBulk{
		create: ttcb,
	}
}

// Tables_typeUpsertBulk is the builder for "upsert"-ing
// a bulk of Tables_type nodes.
type Tables_typeUpsertBulk struct {
	create *TablesTypeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Tables_type.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *Tables_typeUpsertBulk) UpdateNewValues() *Tables_typeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Tables_type.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *Tables_typeUpsertBulk) Ignore() *Tables_typeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *Tables_typeUpsertBulk) DoNothing() *Tables_typeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TablesTypeCreateBulk.OnConflict
// documentation for more info.
func (u *Tables_typeUpsertBulk) Update(set func(*Tables_typeUpsert)) *Tables_typeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&Tables_typeUpsert{UpdateSet: update})
	}))
	return u
}

// SetTablesID sets the "tables_id" field.
func (u *Tables_typeUpsertBulk) SetTablesID(v int) *Tables_typeUpsertBulk {
	return u.Update(func(s *Tables_typeUpsert) {
		s.SetTablesID(v)
	})
}

// AddTablesID adds v to the "tables_id" field.
func (u *Tables_typeUpsertBulk) AddTablesID(v int) *Tables_typeUpsertBulk {
	return u.Update(func(s *Tables_typeUpsert) {
		s.AddTablesID(v)
	})
}

// UpdateTablesID sets the "tables_id" field to the value that was provided on create.
func (u *Tables_typeUpsertBulk) UpdateTablesID() *Tables_typeUpsertBulk {
	return u.Update(func(s *Tables_typeUpsert) {
		s.UpdateTablesID()
	})
}

// SetName sets the "name" field.
func (u *Tables_typeUpsertBulk) SetName(v string) *Tables_typeUpsertBulk {
	return u.Update(func(s *Tables_typeUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *Tables_typeUpsertBulk) UpdateName() *Tables_typeUpsertBulk {
	return u.Update(func(s *Tables_typeUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *Tables_typeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TablesTypeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TablesTypeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *Tables_typeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
