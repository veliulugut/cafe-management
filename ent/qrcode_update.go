// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cafe-management/ent/predicate"
	"cafe-management/ent/qrcode"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// QrCodeUpdate is the builder for updating QrCode entities.
type QrCodeUpdate struct {
	config
	hooks    []Hook
	mutation *QrCodeMutation
}

// Where appends a list predicates to the QrCodeUpdate builder.
func (qcu *QrCodeUpdate) Where(ps ...predicate.QrCode) *QrCodeUpdate {
	qcu.mutation.Where(ps...)
	return qcu
}

// SetURL sets the "url" field.
func (qcu *QrCodeUpdate) SetURL(s string) *QrCodeUpdate {
	qcu.mutation.SetURL(s)
	return qcu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (qcu *QrCodeUpdate) SetNillableURL(s *string) *QrCodeUpdate {
	if s != nil {
		qcu.SetURL(*s)
	}
	return qcu
}

// SetImage sets the "image" field.
func (qcu *QrCodeUpdate) SetImage(s string) *QrCodeUpdate {
	qcu.mutation.SetImage(s)
	return qcu
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (qcu *QrCodeUpdate) SetNillableImage(s *string) *QrCodeUpdate {
	if s != nil {
		qcu.SetImage(*s)
	}
	return qcu
}

// Mutation returns the QrCodeMutation object of the builder.
func (qcu *QrCodeUpdate) Mutation() *QrCodeMutation {
	return qcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qcu *QrCodeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, qcu.sqlSave, qcu.mutation, qcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qcu *QrCodeUpdate) SaveX(ctx context.Context) int {
	affected, err := qcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qcu *QrCodeUpdate) Exec(ctx context.Context) error {
	_, err := qcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qcu *QrCodeUpdate) ExecX(ctx context.Context) {
	if err := qcu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (qcu *QrCodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(qrcode.Table, qrcode.Columns, sqlgraph.NewFieldSpec(qrcode.FieldID, field.TypeInt))
	if ps := qcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qcu.mutation.URL(); ok {
		_spec.SetField(qrcode.FieldURL, field.TypeString, value)
	}
	if value, ok := qcu.mutation.Image(); ok {
		_spec.SetField(qrcode.FieldImage, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{qrcode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	qcu.mutation.done = true
	return n, nil
}

// QrCodeUpdateOne is the builder for updating a single QrCode entity.
type QrCodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QrCodeMutation
}

// SetURL sets the "url" field.
func (qcuo *QrCodeUpdateOne) SetURL(s string) *QrCodeUpdateOne {
	qcuo.mutation.SetURL(s)
	return qcuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (qcuo *QrCodeUpdateOne) SetNillableURL(s *string) *QrCodeUpdateOne {
	if s != nil {
		qcuo.SetURL(*s)
	}
	return qcuo
}

// SetImage sets the "image" field.
func (qcuo *QrCodeUpdateOne) SetImage(s string) *QrCodeUpdateOne {
	qcuo.mutation.SetImage(s)
	return qcuo
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (qcuo *QrCodeUpdateOne) SetNillableImage(s *string) *QrCodeUpdateOne {
	if s != nil {
		qcuo.SetImage(*s)
	}
	return qcuo
}

// Mutation returns the QrCodeMutation object of the builder.
func (qcuo *QrCodeUpdateOne) Mutation() *QrCodeMutation {
	return qcuo.mutation
}

// Where appends a list predicates to the QrCodeUpdate builder.
func (qcuo *QrCodeUpdateOne) Where(ps ...predicate.QrCode) *QrCodeUpdateOne {
	qcuo.mutation.Where(ps...)
	return qcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (qcuo *QrCodeUpdateOne) Select(field string, fields ...string) *QrCodeUpdateOne {
	qcuo.fields = append([]string{field}, fields...)
	return qcuo
}

// Save executes the query and returns the updated QrCode entity.
func (qcuo *QrCodeUpdateOne) Save(ctx context.Context) (*QrCode, error) {
	return withHooks(ctx, qcuo.sqlSave, qcuo.mutation, qcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qcuo *QrCodeUpdateOne) SaveX(ctx context.Context) *QrCode {
	node, err := qcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (qcuo *QrCodeUpdateOne) Exec(ctx context.Context) error {
	_, err := qcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qcuo *QrCodeUpdateOne) ExecX(ctx context.Context) {
	if err := qcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (qcuo *QrCodeUpdateOne) sqlSave(ctx context.Context) (_node *QrCode, err error) {
	_spec := sqlgraph.NewUpdateSpec(qrcode.Table, qrcode.Columns, sqlgraph.NewFieldSpec(qrcode.FieldID, field.TypeInt))
	id, ok := qcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "QrCode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := qcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, qrcode.FieldID)
		for _, f := range fields {
			if !qrcode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != qrcode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := qcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qcuo.mutation.URL(); ok {
		_spec.SetField(qrcode.FieldURL, field.TypeString, value)
	}
	if value, ok := qcuo.mutation.Image(); ok {
		_spec.SetField(qrcode.FieldImage, field.TypeString, value)
	}
	_node = &QrCode{config: qcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, qcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{qrcode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	qcuo.mutation.done = true
	return _node, nil
}
