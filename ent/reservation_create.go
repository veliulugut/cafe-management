// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cafe-management/ent/reservation"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReservationCreate is the builder for creating a Reservation entity.
type ReservationCreate struct {
	config
	mutation *ReservationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetFullName sets the "full_name" field.
func (rc *ReservationCreate) SetFullName(s string) *ReservationCreate {
	rc.mutation.SetFullName(s)
	return rc
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (rc *ReservationCreate) SetNillableFullName(s *string) *ReservationCreate {
	if s != nil {
		rc.SetFullName(*s)
	}
	return rc
}

// SetCreatedAt sets the "created_at" field.
func (rc *ReservationCreate) SetCreatedAt(t time.Time) *ReservationCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *ReservationCreate) SetNillableCreatedAt(t *time.Time) *ReservationCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *ReservationCreate) SetUpdatedAt(t time.Time) *ReservationCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *ReservationCreate) SetNillableUpdatedAt(t *time.Time) *ReservationCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetTableID sets the "table_id" field.
func (rc *ReservationCreate) SetTableID(i int) *ReservationCreate {
	rc.mutation.SetTableID(i)
	return rc
}

// SetPhoneNumber sets the "phone_number" field.
func (rc *ReservationCreate) SetPhoneNumber(s string) *ReservationCreate {
	rc.mutation.SetPhoneNumber(s)
	return rc
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (rc *ReservationCreate) SetNillablePhoneNumber(s *string) *ReservationCreate {
	if s != nil {
		rc.SetPhoneNumber(*s)
	}
	return rc
}

// SetStatus sets the "status" field.
func (rc *ReservationCreate) SetStatus(s string) *ReservationCreate {
	rc.mutation.SetStatus(s)
	return rc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rc *ReservationCreate) SetNillableStatus(s *string) *ReservationCreate {
	if s != nil {
		rc.SetStatus(*s)
	}
	return rc
}

// SetStartTime sets the "start_time" field.
func (rc *ReservationCreate) SetStartTime(t time.Time) *ReservationCreate {
	rc.mutation.SetStartTime(t)
	return rc
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (rc *ReservationCreate) SetNillableStartTime(t *time.Time) *ReservationCreate {
	if t != nil {
		rc.SetStartTime(*t)
	}
	return rc
}

// SetEndTime sets the "end_time" field.
func (rc *ReservationCreate) SetEndTime(t time.Time) *ReservationCreate {
	rc.mutation.SetEndTime(t)
	return rc
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (rc *ReservationCreate) SetNillableEndTime(t *time.Time) *ReservationCreate {
	if t != nil {
		rc.SetEndTime(*t)
	}
	return rc
}

// Mutation returns the ReservationMutation object of the builder.
func (rc *ReservationCreate) Mutation() *ReservationMutation {
	return rc.mutation
}

// Save creates the Reservation in the database.
func (rc *ReservationCreate) Save(ctx context.Context) (*Reservation, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ReservationCreate) SaveX(ctx context.Context) *Reservation {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *ReservationCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *ReservationCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *ReservationCreate) defaults() {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		v := reservation.DefaultCreatedAt
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		v := reservation.DefaultUpdatedAt
		rc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rc.mutation.StartTime(); !ok {
		v := reservation.DefaultStartTime
		rc.mutation.SetStartTime(v)
	}
	if _, ok := rc.mutation.EndTime(); !ok {
		v := reservation.DefaultEndTime
		rc.mutation.SetEndTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *ReservationCreate) check() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Reservation.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Reservation.updated_at"`)}
	}
	if _, ok := rc.mutation.TableID(); !ok {
		return &ValidationError{Name: "table_id", err: errors.New(`ent: missing required field "Reservation.table_id"`)}
	}
	if _, ok := rc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "Reservation.start_time"`)}
	}
	if _, ok := rc.mutation.EndTime(); !ok {
		return &ValidationError{Name: "end_time", err: errors.New(`ent: missing required field "Reservation.end_time"`)}
	}
	return nil
}

func (rc *ReservationCreate) sqlSave(ctx context.Context) (*Reservation, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *ReservationCreate) createSpec() (*Reservation, *sqlgraph.CreateSpec) {
	var (
		_node = &Reservation{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(reservation.Table, sqlgraph.NewFieldSpec(reservation.FieldID, field.TypeInt))
	)
	_spec.OnConflict = rc.conflict
	if value, ok := rc.mutation.FullName(); ok {
		_spec.SetField(reservation.FieldFullName, field.TypeString, value)
		_node.FullName = value
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(reservation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(reservation.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.TableID(); ok {
		_spec.SetField(reservation.FieldTableID, field.TypeInt, value)
		_node.TableID = value
	}
	if value, ok := rc.mutation.PhoneNumber(); ok {
		_spec.SetField(reservation.FieldPhoneNumber, field.TypeString, value)
		_node.PhoneNumber = value
	}
	if value, ok := rc.mutation.Status(); ok {
		_spec.SetField(reservation.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := rc.mutation.StartTime(); ok {
		_spec.SetField(reservation.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := rc.mutation.EndTime(); ok {
		_spec.SetField(reservation.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Reservation.Create().
//		SetFullName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ReservationUpsert) {
//			SetFullName(v+v).
//		}).
//		Exec(ctx)
func (rc *ReservationCreate) OnConflict(opts ...sql.ConflictOption) *ReservationUpsertOne {
	rc.conflict = opts
	return &ReservationUpsertOne{
		create: rc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Reservation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rc *ReservationCreate) OnConflictColumns(columns ...string) *ReservationUpsertOne {
	rc.conflict = append(rc.conflict, sql.ConflictColumns(columns...))
	return &ReservationUpsertOne{
		create: rc,
	}
}

type (
	// ReservationUpsertOne is the builder for "upsert"-ing
	//  one Reservation node.
	ReservationUpsertOne struct {
		create *ReservationCreate
	}

	// ReservationUpsert is the "OnConflict" setter.
	ReservationUpsert struct {
		*sql.UpdateSet
	}
)

// SetFullName sets the "full_name" field.
func (u *ReservationUpsert) SetFullName(v string) *ReservationUpsert {
	u.Set(reservation.FieldFullName, v)
	return u
}

// UpdateFullName sets the "full_name" field to the value that was provided on create.
func (u *ReservationUpsert) UpdateFullName() *ReservationUpsert {
	u.SetExcluded(reservation.FieldFullName)
	return u
}

// ClearFullName clears the value of the "full_name" field.
func (u *ReservationUpsert) ClearFullName() *ReservationUpsert {
	u.SetNull(reservation.FieldFullName)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ReservationUpsert) SetCreatedAt(v time.Time) *ReservationUpsert {
	u.Set(reservation.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ReservationUpsert) UpdateCreatedAt() *ReservationUpsert {
	u.SetExcluded(reservation.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ReservationUpsert) SetUpdatedAt(v time.Time) *ReservationUpsert {
	u.Set(reservation.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ReservationUpsert) UpdateUpdatedAt() *ReservationUpsert {
	u.SetExcluded(reservation.FieldUpdatedAt)
	return u
}

// SetTableID sets the "table_id" field.
func (u *ReservationUpsert) SetTableID(v int) *ReservationUpsert {
	u.Set(reservation.FieldTableID, v)
	return u
}

// UpdateTableID sets the "table_id" field to the value that was provided on create.
func (u *ReservationUpsert) UpdateTableID() *ReservationUpsert {
	u.SetExcluded(reservation.FieldTableID)
	return u
}

// AddTableID adds v to the "table_id" field.
func (u *ReservationUpsert) AddTableID(v int) *ReservationUpsert {
	u.Add(reservation.FieldTableID, v)
	return u
}

// SetPhoneNumber sets the "phone_number" field.
func (u *ReservationUpsert) SetPhoneNumber(v string) *ReservationUpsert {
	u.Set(reservation.FieldPhoneNumber, v)
	return u
}

// UpdatePhoneNumber sets the "phone_number" field to the value that was provided on create.
func (u *ReservationUpsert) UpdatePhoneNumber() *ReservationUpsert {
	u.SetExcluded(reservation.FieldPhoneNumber)
	return u
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (u *ReservationUpsert) ClearPhoneNumber() *ReservationUpsert {
	u.SetNull(reservation.FieldPhoneNumber)
	return u
}

// SetStatus sets the "status" field.
func (u *ReservationUpsert) SetStatus(v string) *ReservationUpsert {
	u.Set(reservation.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ReservationUpsert) UpdateStatus() *ReservationUpsert {
	u.SetExcluded(reservation.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *ReservationUpsert) ClearStatus() *ReservationUpsert {
	u.SetNull(reservation.FieldStatus)
	return u
}

// SetStartTime sets the "start_time" field.
func (u *ReservationUpsert) SetStartTime(v time.Time) *ReservationUpsert {
	u.Set(reservation.FieldStartTime, v)
	return u
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *ReservationUpsert) UpdateStartTime() *ReservationUpsert {
	u.SetExcluded(reservation.FieldStartTime)
	return u
}

// SetEndTime sets the "end_time" field.
func (u *ReservationUpsert) SetEndTime(v time.Time) *ReservationUpsert {
	u.Set(reservation.FieldEndTime, v)
	return u
}

// UpdateEndTime sets the "end_time" field to the value that was provided on create.
func (u *ReservationUpsert) UpdateEndTime() *ReservationUpsert {
	u.SetExcluded(reservation.FieldEndTime)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Reservation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ReservationUpsertOne) UpdateNewValues() *ReservationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Reservation.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ReservationUpsertOne) Ignore() *ReservationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ReservationUpsertOne) DoNothing() *ReservationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ReservationCreate.OnConflict
// documentation for more info.
func (u *ReservationUpsertOne) Update(set func(*ReservationUpsert)) *ReservationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ReservationUpsert{UpdateSet: update})
	}))
	return u
}

// SetFullName sets the "full_name" field.
func (u *ReservationUpsertOne) SetFullName(v string) *ReservationUpsertOne {
	return u.Update(func(s *ReservationUpsert) {
		s.SetFullName(v)
	})
}

// UpdateFullName sets the "full_name" field to the value that was provided on create.
func (u *ReservationUpsertOne) UpdateFullName() *ReservationUpsertOne {
	return u.Update(func(s *ReservationUpsert) {
		s.UpdateFullName()
	})
}

// ClearFullName clears the value of the "full_name" field.
func (u *ReservationUpsertOne) ClearFullName() *ReservationUpsertOne {
	return u.Update(func(s *ReservationUpsert) {
		s.ClearFullName()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ReservationUpsertOne) SetCreatedAt(v time.Time) *ReservationUpsertOne {
	return u.Update(func(s *ReservationUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ReservationUpsertOne) UpdateCreatedAt() *ReservationUpsertOne {
	return u.Update(func(s *ReservationUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ReservationUpsertOne) SetUpdatedAt(v time.Time) *ReservationUpsertOne {
	return u.Update(func(s *ReservationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ReservationUpsertOne) UpdateUpdatedAt() *ReservationUpsertOne {
	return u.Update(func(s *ReservationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetTableID sets the "table_id" field.
func (u *ReservationUpsertOne) SetTableID(v int) *ReservationUpsertOne {
	return u.Update(func(s *ReservationUpsert) {
		s.SetTableID(v)
	})
}

// AddTableID adds v to the "table_id" field.
func (u *ReservationUpsertOne) AddTableID(v int) *ReservationUpsertOne {
	return u.Update(func(s *ReservationUpsert) {
		s.AddTableID(v)
	})
}

// UpdateTableID sets the "table_id" field to the value that was provided on create.
func (u *ReservationUpsertOne) UpdateTableID() *ReservationUpsertOne {
	return u.Update(func(s *ReservationUpsert) {
		s.UpdateTableID()
	})
}

// SetPhoneNumber sets the "phone_number" field.
func (u *ReservationUpsertOne) SetPhoneNumber(v string) *ReservationUpsertOne {
	return u.Update(func(s *ReservationUpsert) {
		s.SetPhoneNumber(v)
	})
}

// UpdatePhoneNumber sets the "phone_number" field to the value that was provided on create.
func (u *ReservationUpsertOne) UpdatePhoneNumber() *ReservationUpsertOne {
	return u.Update(func(s *ReservationUpsert) {
		s.UpdatePhoneNumber()
	})
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (u *ReservationUpsertOne) ClearPhoneNumber() *ReservationUpsertOne {
	return u.Update(func(s *ReservationUpsert) {
		s.ClearPhoneNumber()
	})
}

// SetStatus sets the "status" field.
func (u *ReservationUpsertOne) SetStatus(v string) *ReservationUpsertOne {
	return u.Update(func(s *ReservationUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ReservationUpsertOne) UpdateStatus() *ReservationUpsertOne {
	return u.Update(func(s *ReservationUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *ReservationUpsertOne) ClearStatus() *ReservationUpsertOne {
	return u.Update(func(s *ReservationUpsert) {
		s.ClearStatus()
	})
}

// SetStartTime sets the "start_time" field.
func (u *ReservationUpsertOne) SetStartTime(v time.Time) *ReservationUpsertOne {
	return u.Update(func(s *ReservationUpsert) {
		s.SetStartTime(v)
	})
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *ReservationUpsertOne) UpdateStartTime() *ReservationUpsertOne {
	return u.Update(func(s *ReservationUpsert) {
		s.UpdateStartTime()
	})
}

// SetEndTime sets the "end_time" field.
func (u *ReservationUpsertOne) SetEndTime(v time.Time) *ReservationUpsertOne {
	return u.Update(func(s *ReservationUpsert) {
		s.SetEndTime(v)
	})
}

// UpdateEndTime sets the "end_time" field to the value that was provided on create.
func (u *ReservationUpsertOne) UpdateEndTime() *ReservationUpsertOne {
	return u.Update(func(s *ReservationUpsert) {
		s.UpdateEndTime()
	})
}

// Exec executes the query.
func (u *ReservationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ReservationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ReservationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ReservationUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ReservationUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ReservationCreateBulk is the builder for creating many Reservation entities in bulk.
type ReservationCreateBulk struct {
	config
	err      error
	builders []*ReservationCreate
	conflict []sql.ConflictOption
}

// Save creates the Reservation entities in the database.
func (rcb *ReservationCreateBulk) Save(ctx context.Context) ([]*Reservation, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Reservation, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReservationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *ReservationCreateBulk) SaveX(ctx context.Context) []*Reservation {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *ReservationCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *ReservationCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Reservation.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ReservationUpsert) {
//			SetFullName(v+v).
//		}).
//		Exec(ctx)
func (rcb *ReservationCreateBulk) OnConflict(opts ...sql.ConflictOption) *ReservationUpsertBulk {
	rcb.conflict = opts
	return &ReservationUpsertBulk{
		create: rcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Reservation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcb *ReservationCreateBulk) OnConflictColumns(columns ...string) *ReservationUpsertBulk {
	rcb.conflict = append(rcb.conflict, sql.ConflictColumns(columns...))
	return &ReservationUpsertBulk{
		create: rcb,
	}
}

// ReservationUpsertBulk is the builder for "upsert"-ing
// a bulk of Reservation nodes.
type ReservationUpsertBulk struct {
	create *ReservationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Reservation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ReservationUpsertBulk) UpdateNewValues() *ReservationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Reservation.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ReservationUpsertBulk) Ignore() *ReservationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ReservationUpsertBulk) DoNothing() *ReservationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ReservationCreateBulk.OnConflict
// documentation for more info.
func (u *ReservationUpsertBulk) Update(set func(*ReservationUpsert)) *ReservationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ReservationUpsert{UpdateSet: update})
	}))
	return u
}

// SetFullName sets the "full_name" field.
func (u *ReservationUpsertBulk) SetFullName(v string) *ReservationUpsertBulk {
	return u.Update(func(s *ReservationUpsert) {
		s.SetFullName(v)
	})
}

// UpdateFullName sets the "full_name" field to the value that was provided on create.
func (u *ReservationUpsertBulk) UpdateFullName() *ReservationUpsertBulk {
	return u.Update(func(s *ReservationUpsert) {
		s.UpdateFullName()
	})
}

// ClearFullName clears the value of the "full_name" field.
func (u *ReservationUpsertBulk) ClearFullName() *ReservationUpsertBulk {
	return u.Update(func(s *ReservationUpsert) {
		s.ClearFullName()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ReservationUpsertBulk) SetCreatedAt(v time.Time) *ReservationUpsertBulk {
	return u.Update(func(s *ReservationUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ReservationUpsertBulk) UpdateCreatedAt() *ReservationUpsertBulk {
	return u.Update(func(s *ReservationUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ReservationUpsertBulk) SetUpdatedAt(v time.Time) *ReservationUpsertBulk {
	return u.Update(func(s *ReservationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ReservationUpsertBulk) UpdateUpdatedAt() *ReservationUpsertBulk {
	return u.Update(func(s *ReservationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetTableID sets the "table_id" field.
func (u *ReservationUpsertBulk) SetTableID(v int) *ReservationUpsertBulk {
	return u.Update(func(s *ReservationUpsert) {
		s.SetTableID(v)
	})
}

// AddTableID adds v to the "table_id" field.
func (u *ReservationUpsertBulk) AddTableID(v int) *ReservationUpsertBulk {
	return u.Update(func(s *ReservationUpsert) {
		s.AddTableID(v)
	})
}

// UpdateTableID sets the "table_id" field to the value that was provided on create.
func (u *ReservationUpsertBulk) UpdateTableID() *ReservationUpsertBulk {
	return u.Update(func(s *ReservationUpsert) {
		s.UpdateTableID()
	})
}

// SetPhoneNumber sets the "phone_number" field.
func (u *ReservationUpsertBulk) SetPhoneNumber(v string) *ReservationUpsertBulk {
	return u.Update(func(s *ReservationUpsert) {
		s.SetPhoneNumber(v)
	})
}

// UpdatePhoneNumber sets the "phone_number" field to the value that was provided on create.
func (u *ReservationUpsertBulk) UpdatePhoneNumber() *ReservationUpsertBulk {
	return u.Update(func(s *ReservationUpsert) {
		s.UpdatePhoneNumber()
	})
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (u *ReservationUpsertBulk) ClearPhoneNumber() *ReservationUpsertBulk {
	return u.Update(func(s *ReservationUpsert) {
		s.ClearPhoneNumber()
	})
}

// SetStatus sets the "status" field.
func (u *ReservationUpsertBulk) SetStatus(v string) *ReservationUpsertBulk {
	return u.Update(func(s *ReservationUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ReservationUpsertBulk) UpdateStatus() *ReservationUpsertBulk {
	return u.Update(func(s *ReservationUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *ReservationUpsertBulk) ClearStatus() *ReservationUpsertBulk {
	return u.Update(func(s *ReservationUpsert) {
		s.ClearStatus()
	})
}

// SetStartTime sets the "start_time" field.
func (u *ReservationUpsertBulk) SetStartTime(v time.Time) *ReservationUpsertBulk {
	return u.Update(func(s *ReservationUpsert) {
		s.SetStartTime(v)
	})
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *ReservationUpsertBulk) UpdateStartTime() *ReservationUpsertBulk {
	return u.Update(func(s *ReservationUpsert) {
		s.UpdateStartTime()
	})
}

// SetEndTime sets the "end_time" field.
func (u *ReservationUpsertBulk) SetEndTime(v time.Time) *ReservationUpsertBulk {
	return u.Update(func(s *ReservationUpsert) {
		s.SetEndTime(v)
	})
}

// UpdateEndTime sets the "end_time" field to the value that was provided on create.
func (u *ReservationUpsertBulk) UpdateEndTime() *ReservationUpsertBulk {
	return u.Update(func(s *ReservationUpsert) {
		s.UpdateEndTime()
	})
}

// Exec executes the query.
func (u *ReservationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ReservationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ReservationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ReservationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
