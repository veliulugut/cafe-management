// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cafe-management/ent/reservation"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReservationCreate is the builder for creating a Reservation entity.
type ReservationCreate struct {
	config
	mutation *ReservationMutation
	hooks    []Hook
}

// SetFullName sets the "full_name" field.
func (rc *ReservationCreate) SetFullName(s string) *ReservationCreate {
	rc.mutation.SetFullName(s)
	return rc
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (rc *ReservationCreate) SetNillableFullName(s *string) *ReservationCreate {
	if s != nil {
		rc.SetFullName(*s)
	}
	return rc
}

// SetCreatedAt sets the "created_at" field.
func (rc *ReservationCreate) SetCreatedAt(t time.Time) *ReservationCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *ReservationCreate) SetNillableCreatedAt(t *time.Time) *ReservationCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *ReservationCreate) SetUpdatedAt(t time.Time) *ReservationCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *ReservationCreate) SetNillableUpdatedAt(t *time.Time) *ReservationCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetTableID sets the "table_id" field.
func (rc *ReservationCreate) SetTableID(i int) *ReservationCreate {
	rc.mutation.SetTableID(i)
	return rc
}

// SetPhoneNumber sets the "phone_number" field.
func (rc *ReservationCreate) SetPhoneNumber(s string) *ReservationCreate {
	rc.mutation.SetPhoneNumber(s)
	return rc
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (rc *ReservationCreate) SetNillablePhoneNumber(s *string) *ReservationCreate {
	if s != nil {
		rc.SetPhoneNumber(*s)
	}
	return rc
}

// SetStatus sets the "status" field.
func (rc *ReservationCreate) SetStatus(s string) *ReservationCreate {
	rc.mutation.SetStatus(s)
	return rc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rc *ReservationCreate) SetNillableStatus(s *string) *ReservationCreate {
	if s != nil {
		rc.SetStatus(*s)
	}
	return rc
}

// SetStartTime sets the "start_time" field.
func (rc *ReservationCreate) SetStartTime(t time.Time) *ReservationCreate {
	rc.mutation.SetStartTime(t)
	return rc
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (rc *ReservationCreate) SetNillableStartTime(t *time.Time) *ReservationCreate {
	if t != nil {
		rc.SetStartTime(*t)
	}
	return rc
}

// SetEndTime sets the "end_time" field.
func (rc *ReservationCreate) SetEndTime(t time.Time) *ReservationCreate {
	rc.mutation.SetEndTime(t)
	return rc
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (rc *ReservationCreate) SetNillableEndTime(t *time.Time) *ReservationCreate {
	if t != nil {
		rc.SetEndTime(*t)
	}
	return rc
}

// Mutation returns the ReservationMutation object of the builder.
func (rc *ReservationCreate) Mutation() *ReservationMutation {
	return rc.mutation
}

// Save creates the Reservation in the database.
func (rc *ReservationCreate) Save(ctx context.Context) (*Reservation, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ReservationCreate) SaveX(ctx context.Context) *Reservation {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *ReservationCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *ReservationCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *ReservationCreate) defaults() {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		v := reservation.DefaultCreatedAt
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		v := reservation.DefaultUpdatedAt
		rc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rc.mutation.StartTime(); !ok {
		v := reservation.DefaultStartTime
		rc.mutation.SetStartTime(v)
	}
	if _, ok := rc.mutation.EndTime(); !ok {
		v := reservation.DefaultEndTime
		rc.mutation.SetEndTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *ReservationCreate) check() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Reservation.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Reservation.updated_at"`)}
	}
	if _, ok := rc.mutation.TableID(); !ok {
		return &ValidationError{Name: "table_id", err: errors.New(`ent: missing required field "Reservation.table_id"`)}
	}
	if _, ok := rc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "Reservation.start_time"`)}
	}
	if _, ok := rc.mutation.EndTime(); !ok {
		return &ValidationError{Name: "end_time", err: errors.New(`ent: missing required field "Reservation.end_time"`)}
	}
	return nil
}

func (rc *ReservationCreate) sqlSave(ctx context.Context) (*Reservation, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *ReservationCreate) createSpec() (*Reservation, *sqlgraph.CreateSpec) {
	var (
		_node = &Reservation{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(reservation.Table, sqlgraph.NewFieldSpec(reservation.FieldID, field.TypeInt))
	)
	if value, ok := rc.mutation.FullName(); ok {
		_spec.SetField(reservation.FieldFullName, field.TypeString, value)
		_node.FullName = value
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(reservation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(reservation.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.TableID(); ok {
		_spec.SetField(reservation.FieldTableID, field.TypeInt, value)
		_node.TableID = value
	}
	if value, ok := rc.mutation.PhoneNumber(); ok {
		_spec.SetField(reservation.FieldPhoneNumber, field.TypeString, value)
		_node.PhoneNumber = value
	}
	if value, ok := rc.mutation.Status(); ok {
		_spec.SetField(reservation.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := rc.mutation.StartTime(); ok {
		_spec.SetField(reservation.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := rc.mutation.EndTime(); ok {
		_spec.SetField(reservation.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	return _node, _spec
}

// ReservationCreateBulk is the builder for creating many Reservation entities in bulk.
type ReservationCreateBulk struct {
	config
	err      error
	builders []*ReservationCreate
}

// Save creates the Reservation entities in the database.
func (rcb *ReservationCreateBulk) Save(ctx context.Context) ([]*Reservation, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Reservation, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReservationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *ReservationCreateBulk) SaveX(ctx context.Context) []*Reservation {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *ReservationCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *ReservationCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
