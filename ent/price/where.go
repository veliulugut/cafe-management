// Code generated by ent, DO NOT EDIT.

package price

import (
	"cafe-management/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldID, id))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v float64) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldPrice, v))
}

// PriceName applies equality check predicate on the "price_name" field. It's identical to PriceNameEQ.
func PriceName(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldPriceName, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldUpdatedAt, v))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v float64) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v float64) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...float64) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...float64) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v float64) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v float64) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v float64) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v float64) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldPrice, v))
}

// PriceNameEQ applies the EQ predicate on the "price_name" field.
func PriceNameEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldPriceName, v))
}

// PriceNameNEQ applies the NEQ predicate on the "price_name" field.
func PriceNameNEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldPriceName, v))
}

// PriceNameIn applies the In predicate on the "price_name" field.
func PriceNameIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldPriceName, vs...))
}

// PriceNameNotIn applies the NotIn predicate on the "price_name" field.
func PriceNameNotIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldPriceName, vs...))
}

// PriceNameGT applies the GT predicate on the "price_name" field.
func PriceNameGT(v string) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldPriceName, v))
}

// PriceNameGTE applies the GTE predicate on the "price_name" field.
func PriceNameGTE(v string) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldPriceName, v))
}

// PriceNameLT applies the LT predicate on the "price_name" field.
func PriceNameLT(v string) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldPriceName, v))
}

// PriceNameLTE applies the LTE predicate on the "price_name" field.
func PriceNameLTE(v string) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldPriceName, v))
}

// PriceNameContains applies the Contains predicate on the "price_name" field.
func PriceNameContains(v string) predicate.Price {
	return predicate.Price(sql.FieldContains(FieldPriceName, v))
}

// PriceNameHasPrefix applies the HasPrefix predicate on the "price_name" field.
func PriceNameHasPrefix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasPrefix(FieldPriceName, v))
}

// PriceNameHasSuffix applies the HasSuffix predicate on the "price_name" field.
func PriceNameHasSuffix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasSuffix(FieldPriceName, v))
}

// PriceNameEqualFold applies the EqualFold predicate on the "price_name" field.
func PriceNameEqualFold(v string) predicate.Price {
	return predicate.Price(sql.FieldEqualFold(FieldPriceName, v))
}

// PriceNameContainsFold applies the ContainsFold predicate on the "price_name" field.
func PriceNameContainsFold(v string) predicate.Price {
	return predicate.Price(sql.FieldContainsFold(FieldPriceName, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Price) predicate.Price {
	return predicate.Price(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Price) predicate.Price {
	return predicate.Price(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Price) predicate.Price {
	return predicate.Price(sql.NotPredicates(p))
}
