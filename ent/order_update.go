// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cafe-management/ent/order"
	"cafe-management/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderUpdate is the builder for updating Order entities.
type OrderUpdate struct {
	config
	hooks    []Hook
	mutation *OrderMutation
}

// Where appends a list predicates to the OrderUpdate builder.
func (ou *OrderUpdate) Where(ps ...predicate.Order) *OrderUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetOrderID sets the "order_id" field.
func (ou *OrderUpdate) SetOrderID(i int) *OrderUpdate {
	ou.mutation.ResetOrderID()
	ou.mutation.SetOrderID(i)
	return ou
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableOrderID(i *int) *OrderUpdate {
	if i != nil {
		ou.SetOrderID(*i)
	}
	return ou
}

// AddOrderID adds i to the "order_id" field.
func (ou *OrderUpdate) AddOrderID(i int) *OrderUpdate {
	ou.mutation.AddOrderID(i)
	return ou
}

// SetTableID sets the "table_id" field.
func (ou *OrderUpdate) SetTableID(i int) *OrderUpdate {
	ou.mutation.ResetTableID()
	ou.mutation.SetTableID(i)
	return ou
}

// SetNillableTableID sets the "table_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableTableID(i *int) *OrderUpdate {
	if i != nil {
		ou.SetTableID(*i)
	}
	return ou
}

// AddTableID adds i to the "table_id" field.
func (ou *OrderUpdate) AddTableID(i int) *OrderUpdate {
	ou.mutation.AddTableID(i)
	return ou
}

// SetUserID sets the "user_id" field.
func (ou *OrderUpdate) SetUserID(i int) *OrderUpdate {
	ou.mutation.ResetUserID()
	ou.mutation.SetUserID(i)
	return ou
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableUserID(i *int) *OrderUpdate {
	if i != nil {
		ou.SetUserID(*i)
	}
	return ou
}

// AddUserID adds i to the "user_id" field.
func (ou *OrderUpdate) AddUserID(i int) *OrderUpdate {
	ou.mutation.AddUserID(i)
	return ou
}

// SetOrderType sets the "order_type" field.
func (ou *OrderUpdate) SetOrderType(i int) *OrderUpdate {
	ou.mutation.ResetOrderType()
	ou.mutation.SetOrderType(i)
	return ou
}

// SetNillableOrderType sets the "order_type" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableOrderType(i *int) *OrderUpdate {
	if i != nil {
		ou.SetOrderType(*i)
	}
	return ou
}

// AddOrderType adds i to the "order_type" field.
func (ou *OrderUpdate) AddOrderType(i int) *OrderUpdate {
	ou.mutation.AddOrderType(i)
	return ou
}

// SetStatus sets the "status" field.
func (ou *OrderUpdate) SetStatus(s string) *OrderUpdate {
	ou.mutation.SetStatus(s)
	return ou
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableStatus(s *string) *OrderUpdate {
	if s != nil {
		ou.SetStatus(*s)
	}
	return ou
}

// SetCreatedAt sets the "created_at" field.
func (ou *OrderUpdate) SetCreatedAt(t time.Time) *OrderUpdate {
	ou.mutation.SetCreatedAt(t)
	return ou
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCreatedAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetCreatedAt(*t)
	}
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *OrderUpdate) SetUpdatedAt(t time.Time) *OrderUpdate {
	ou.mutation.SetUpdatedAt(t)
	return ou
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableUpdatedAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetUpdatedAt(*t)
	}
	return ou
}

// SetOrderDate sets the "order_date" field.
func (ou *OrderUpdate) SetOrderDate(t time.Time) *OrderUpdate {
	ou.mutation.SetOrderDate(t)
	return ou
}

// SetNillableOrderDate sets the "order_date" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableOrderDate(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetOrderDate(*t)
	}
	return ou
}

// Mutation returns the OrderMutation object of the builder.
func (ou *OrderUpdate) Mutation() *OrderMutation {
	return ou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrderUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrderUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrderUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrderUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ou *OrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.OrderID(); ok {
		_spec.SetField(order.FieldOrderID, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedOrderID(); ok {
		_spec.AddField(order.FieldOrderID, field.TypeInt, value)
	}
	if value, ok := ou.mutation.TableID(); ok {
		_spec.SetField(order.FieldTableID, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedTableID(); ok {
		_spec.AddField(order.FieldTableID, field.TypeInt, value)
	}
	if value, ok := ou.mutation.UserID(); ok {
		_spec.SetField(order.FieldUserID, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedUserID(); ok {
		_spec.AddField(order.FieldUserID, field.TypeInt, value)
	}
	if value, ok := ou.mutation.OrderType(); ok {
		_spec.SetField(order.FieldOrderType, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedOrderType(); ok {
		_spec.AddField(order.FieldOrderType, field.TypeInt, value)
	}
	if value, ok := ou.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeString, value)
	}
	if value, ok := ou.mutation.CreatedAt(); ok {
		_spec.SetField(order.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ou.mutation.OrderDate(); ok {
		_spec.SetField(order.FieldOrderDate, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrderUpdateOne is the builder for updating a single Order entity.
type OrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderMutation
}

// SetOrderID sets the "order_id" field.
func (ouo *OrderUpdateOne) SetOrderID(i int) *OrderUpdateOne {
	ouo.mutation.ResetOrderID()
	ouo.mutation.SetOrderID(i)
	return ouo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableOrderID(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetOrderID(*i)
	}
	return ouo
}

// AddOrderID adds i to the "order_id" field.
func (ouo *OrderUpdateOne) AddOrderID(i int) *OrderUpdateOne {
	ouo.mutation.AddOrderID(i)
	return ouo
}

// SetTableID sets the "table_id" field.
func (ouo *OrderUpdateOne) SetTableID(i int) *OrderUpdateOne {
	ouo.mutation.ResetTableID()
	ouo.mutation.SetTableID(i)
	return ouo
}

// SetNillableTableID sets the "table_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableTableID(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetTableID(*i)
	}
	return ouo
}

// AddTableID adds i to the "table_id" field.
func (ouo *OrderUpdateOne) AddTableID(i int) *OrderUpdateOne {
	ouo.mutation.AddTableID(i)
	return ouo
}

// SetUserID sets the "user_id" field.
func (ouo *OrderUpdateOne) SetUserID(i int) *OrderUpdateOne {
	ouo.mutation.ResetUserID()
	ouo.mutation.SetUserID(i)
	return ouo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableUserID(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetUserID(*i)
	}
	return ouo
}

// AddUserID adds i to the "user_id" field.
func (ouo *OrderUpdateOne) AddUserID(i int) *OrderUpdateOne {
	ouo.mutation.AddUserID(i)
	return ouo
}

// SetOrderType sets the "order_type" field.
func (ouo *OrderUpdateOne) SetOrderType(i int) *OrderUpdateOne {
	ouo.mutation.ResetOrderType()
	ouo.mutation.SetOrderType(i)
	return ouo
}

// SetNillableOrderType sets the "order_type" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableOrderType(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetOrderType(*i)
	}
	return ouo
}

// AddOrderType adds i to the "order_type" field.
func (ouo *OrderUpdateOne) AddOrderType(i int) *OrderUpdateOne {
	ouo.mutation.AddOrderType(i)
	return ouo
}

// SetStatus sets the "status" field.
func (ouo *OrderUpdateOne) SetStatus(s string) *OrderUpdateOne {
	ouo.mutation.SetStatus(s)
	return ouo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableStatus(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetStatus(*s)
	}
	return ouo
}

// SetCreatedAt sets the "created_at" field.
func (ouo *OrderUpdateOne) SetCreatedAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetCreatedAt(t)
	return ouo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCreatedAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetCreatedAt(*t)
	}
	return ouo
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *OrderUpdateOne) SetUpdatedAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetUpdatedAt(t)
	return ouo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableUpdatedAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetUpdatedAt(*t)
	}
	return ouo
}

// SetOrderDate sets the "order_date" field.
func (ouo *OrderUpdateOne) SetOrderDate(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetOrderDate(t)
	return ouo
}

// SetNillableOrderDate sets the "order_date" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableOrderDate(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetOrderDate(*t)
	}
	return ouo
}

// Mutation returns the OrderMutation object of the builder.
func (ouo *OrderUpdateOne) Mutation() *OrderMutation {
	return ouo.mutation
}

// Where appends a list predicates to the OrderUpdate builder.
func (ouo *OrderUpdateOne) Where(ps ...predicate.Order) *OrderUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrderUpdateOne) Select(field string, fields ...string) *OrderUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Order entity.
func (ouo *OrderUpdateOne) Save(ctx context.Context) (*Order, error) {
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrderUpdateOne) SaveX(ctx context.Context) *Order {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrderUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrderUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ouo *OrderUpdateOne) sqlSave(ctx context.Context) (_node *Order, err error) {
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Order.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, order.FieldID)
		for _, f := range fields {
			if !order.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != order.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.OrderID(); ok {
		_spec.SetField(order.FieldOrderID, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedOrderID(); ok {
		_spec.AddField(order.FieldOrderID, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.TableID(); ok {
		_spec.SetField(order.FieldTableID, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedTableID(); ok {
		_spec.AddField(order.FieldTableID, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.UserID(); ok {
		_spec.SetField(order.FieldUserID, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedUserID(); ok {
		_spec.AddField(order.FieldUserID, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.OrderType(); ok {
		_spec.SetField(order.FieldOrderType, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedOrderType(); ok {
		_spec.AddField(order.FieldOrderType, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeString, value)
	}
	if value, ok := ouo.mutation.CreatedAt(); ok {
		_spec.SetField(order.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.OrderDate(); ok {
		_spec.SetField(order.FieldOrderDate, field.TypeTime, value)
	}
	_node = &Order{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
